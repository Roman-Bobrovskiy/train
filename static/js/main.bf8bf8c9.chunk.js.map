{"version":3,"sources":["Components/utils/json/test_task_data.csv","Components/utils/getCSVData.js","Components/utils/getObject.js","Components/utils/timeCounter.js","Components/Display/Display.js","Components/utils/getStationList.js","Components/utils/getWay.js","App.js","index.js"],"names":["getData","axios","get","csvFile","createNewObj","elem","Object","result","split","newObj","forEach","item","index","Number","String","getObject","CSVData","arr","newArr","push","getSumm","obj","rez","reduce","acc","items","getDate","travelTime","minutes","Math","round","abs","hours","string","nowData","Date","ms","getFullYear","getMonth","parse","getTime","getTravelTime","onDispatchTime","onArrivalTime","different","seconds","getTotalTime","summTime","Display","totalPrice","params","price","toFixed","totalTime","map","indexLI","namberTrain","dispatchStation","arrivalStation","getStationList","Set","taskData","a","sort","listVisitStation","getWay","station","previousStation","stat","currentStation","includes","time","hasOwnProperty","dispatchTime","arrivalTime","firstStation","length","App","state","dataCSV","load","then","req","setState","data","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf8bf8c9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/test_task_data.d5e18288.csv\";","import axios from \"axios\";\nimport csvFile from \"./json/test_task_data.csv\";\n\n//запрос csvFile\nlet getData = () => {\n  return axios.get(csvFile);\n};\n\nexport default getData;\n","//getObject Парсит результат запроса и создает массив\nlet getObject = (CSVData) => {\n  let arr = CSVData.split(\"\\r\\n\");\n\n  let newArr = [];\n  arr.forEach((elem) => newArr.push(createNewObj(elem)));\n  return newArr;\n};\n\n//createNewObj добавляет в объект ключи\nlet createNewObj = (elem) => {\n  let Object = [\n    \"namberTrain\",\n    \"dispatchStation\",\n    \"arrivalStation\",\n    \"price\",\n    \"dispatchTime\",\n    \"arrivalTime\",\n  ];\n\n  let result = elem.split(\";\");\n  let newObj = {};\n\n  result.forEach((item, index) => {\n    if (index < 4) {\n      newObj = { ...newObj, [Object[index]]: Number(item) };\n    } else {\n      newObj = { ...newObj, [Object[index]]: String(item) };\n    }\n  });\n  return newObj;\n};\n\nexport default getObject;\n","//Время в пути\nlet getTravelTime = (onDispatchTime, onArrivalTime) => {\n  let getDate = (string) =>\n    new Date(\n      0,\n      0,\n      0,\n      string.split(\":\")[0],\n      string.split(\":\")[1],\n      string.split(\":\")[2]\n    );\n  let different = getDate(onArrivalTime) - getDate(onDispatchTime);\n  const seconds = Math.round(Math.abs((different / 1000) % 60));\n  const minutes = Math.round(Math.abs((different / 1000 / 60) % 60));\n  const hours = Math.round(Math.abs((different / (1000 * 60 * 60)) % 24));\n\n  let result = hours + \":\" + minutes + \":\" + seconds;\n  return result;\n};\n\n//getTotalTime- Возвращает общее время в пути\nlet getTotalTime = (travelTime) => {\n  let summTime = [];\n  travelTime.forEach((obj) => summTime.push(getSumm(obj)));\n  return summTime;\n};\n\n//getSumm - складывает время\nlet getSumm = (obj) => {\n  let rez = obj.reduce((acc, items) => {\n    return acc + (getDate(items.travelTime) - getDate(\"00:00:00\"));\n  }, 0);\n\n  // const seconds = Math.round(Math.abs((rez / 1000) % 60));\n  const minutes = Math.round(Math.abs((rez / 1000 / 60) % 60));\n  const hours = Math.round(Math.abs((rez / (1000 * 60 * 60)) % 24));\n  const day = Math.round(Math.abs(rez / (1000 * 60 * 60 * 24)));\n\n  let result =\n    \"day\" +\n    \" \" +\n    day +\n    \":\" +\n    \" \" +\n    \"hours\" +\n    \" \" +\n    hours +\n    \":\" +\n    \" \" +\n    \"minutes\" +\n    \" \" +\n    minutes +\n    \":\" +\n    \" \";\n\n  return result;\n};\n\nlet getDate = (string) => {\n  let nowData = new Date();\n  let ms = new Date(\n    nowData.getFullYear(),\n    nowData.getMonth(),\n    nowData.getDate(),\n    string.split(\":\")[0],\n    string.split(\":\")[1],\n    string.split(\":\")[2]\n  );\n  return Date.parse(ms);\n};\n\nlet getTime = {\n  getTravelTime,\n  getTotalTime,\n};\n\nexport default getTime;\n","import React, { Fragment } from \"react\";\nimport getTime from \"../utils/timeCounter\";\n\nexport default function Display({ result }) {\n  //Расчет суммы\n  let totalPrice = [];\n  result.forEach((obj) =>\n    totalPrice.push(\n      Number(obj.reduce((acc, params) => acc + params.price, 0).toFixed(2))\n    )\n  );\n  //Расчет времени\n  let totalTime = getTime.getTotalTime(result);\n\n  return (\n    <div>\n      {[...result].map((item, index) => {\n        return (\n          <Fragment key={index}>\n            <ul>\n              {item.map(\n                (\n                  {\n                    namberTrain,\n                    dispatchStation,\n                    arrivalStation,\n                    price,\n                    travelTime,\n                  },\n                  indexLI\n                ) => {\n                  return (\n                    <li key={indexLI}>\n                      Train number: {namberTrain}, Dispatch: {dispatchStation}{\" \"}\n                      {\"  ==>  \"} Arrival: {arrivalStation} Price: {price},\n                      Travel time: {travelTime}\n                    </li>\n                  );\n                }\n              )}\n            </ul>\n            <p>Amount: {totalPrice[index]}</p>\n            <p>Travel time: {totalTime[index]}</p>\n          </Fragment>\n        );\n      })}\n    </div>\n  );\n}\n","import taskData from \"./json/test_task_data.json\";\n\nlet getStationList = () => {\n  let stationListArr;\n\n  stationListArr = [...new Set(taskData.map((a) => a.dispatchStation))];\n\n  return stationListArr.sort();\n};\n\nexport default getStationList;\n","import getStationList from \"./getStationList\";\r\nimport getTime from \"./timeCounter\";\r\n\r\nlet arr = [];\r\nlet listVisitStation = [];\r\n\r\n// Станции отправления\r\nlet firstStation = (taskData) => {\r\n  let result = [];\r\n  getStationList().forEach((station) => {\r\n    getWay(taskData, station);\r\n    if (arr && arr.length >= getStationList().length - 1) {\r\n      result = [...result, arr];\r\n    }\r\n    listVisitStation = [];\r\n    arr = [];\r\n  });\r\n  return result;\r\n};\r\n\r\n//Поиск маршрута\r\nlet getWay = (taskData, station) => {\r\n  listVisitStation = [...listVisitStation, station];\r\n  let previousStation = station;\r\n\r\n  taskData.forEach((stat) => {\r\n    let currentStation = stat.arrivalStation;\r\n\r\n    if (\r\n      previousStation === stat.dispatchStation &&\r\n      !listVisitStation.includes(stat.arrivalStation)\r\n    ) {\r\n      time(taskData);\r\n      arr = [...arr, stat];\r\n      listVisitStation = [...listVisitStation, stat.arrivalStation];\r\n      previousStation = currentStation;\r\n      return arr;\r\n    }\r\n  });\r\n};\r\n\r\n//Time - рассчитывает время в пути и добавляет его в объект\r\nlet time = (taskData) => {\r\n  taskData.forEach((item) => {\r\n    if (!item.hasOwnProperty(\"travelTime\")) {\r\n      return (item[\"travelTime\"] = getTime.getTravelTime(\r\n        item.dispatchTime,\r\n        item.arrivalTime\r\n      ));\r\n    }\r\n  });\r\n};\r\nexport default firstStation;\r\n","import React, { Component } from \"react\";\nimport getData from \"./Components/utils/getCSVData\";\nimport getObject from \"./Components/utils/getObject\";\nimport Display from \"./Components/Display/Display\";\nimport getWay from \"./Components/utils/getWay\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.load();\n  }\n\n  state = {\n    dataCSV: null,\n    result: null,\n  };\n  //Добавляет в state расписание\n  load() {\n    getData().then((req) => this.setState({ dataCSV: getObject(req.data) }));\n  }\n\n  componentDidUpdate() {\n    //Запуск, результат записывается в state\n    if (this.state.result === null) {\n      this.setState({ result: getWay(this.state.dataCSV) });\n    }\n  }\n\n  render() {\n    //передаем результат из state в Display. Display выводит результат\n    let { result } = this.state;\n    return <div>{result !== null ? <Display result={result} /> : null}</div>;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}